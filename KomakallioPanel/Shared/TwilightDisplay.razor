@using System.Globalization;
@using Microsoft.Extensions.Options;
@implements IDisposable
@inject IOptions<LocationOptions> LocationOptions;

@{
    var latitude = LocationOptions.Value.Latitude;
    var longitude = LocationOptions.Value.Longitude;
    var now = DateTime.UtcNow;
}

<div>
    @{
        var sunPos = SunCalcNet.SunCalc.GetSunPosition(now, latitude, longitude);
    }
    <p>
        Sun altitude: @RadianToDegree(@sunPos.Altitude).ToString("F2", CultureInfo.InvariantCulture)°
    </p>

    @{
        var sunPhases = SunCalcNet.SunCalc.GetSunPhases(now, latitude, longitude, 0).ToArray();
        var sunsetTime = sunPhases
            .Single(p => p.Name.Value == SunCalcNet.Model.SunPhaseName.Sunset.Value)
            .PhaseTime;

        var timeToSunset = (sunsetTime - now);
        var timeToSunsetString = $"{timeToSunset.Hours} h {timeToSunset.Minutes} min";
    }
    <p>
        Sun sets in @timeToSunsetString
    </p>

    @{
        var moonPos = SunCalcNet.MoonCalc.GetMoonPosition(now, latitude, longitude);
        var moonIllumination = SunCalcNet.MoonCalc.GetMoonIllumination(now);
    }
    <p>
        Moon altitude: @RadianToDegree(@moonPos.Altitude).ToString("F2", CultureInfo.InvariantCulture)°
    </p>
    <p>
        Moon illumination: @moonIllumination.Fraction.ToString("P2", CultureInfo.InvariantCulture)
    </p>
</div>

@code {
    private readonly TimeSpan refreshInterval = TimeSpan.FromSeconds(20);
    private Timer? _timer;

    protected override void OnInitialized()
    {
        _timer = new System.Threading.Timer(e =>
        {
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        },
        state: null,
        dueTime: refreshInterval,
        period: refreshInterval);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    double RadianToDegree(double radian)
    {
        return 180.0 * radian / Math.PI;
    }
}

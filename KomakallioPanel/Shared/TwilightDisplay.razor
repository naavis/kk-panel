@using System.Globalization;
@using Microsoft.Extensions.Options;
@inject IOptions<LocationOptions> LocationOptions;

@{
    var latitude = LocationOptions.Value.Latitude;
    var longitude = LocationOptions.Value.Longitude;

    var time = DateTime.UtcNow;
    var sunPos = SunCalcNet.SunCalc.GetSunPosition(time, latitude, longitude);
    var sunPhases = SunCalcNet.SunCalc.GetSunPhases(time, latitude, longitude, 0).ToArray();
    var sunsetTime = sunPhases
        .Single(p => p.Name.Value == SunCalcNet.Model.SunPhaseName.Sunset.Value)
        .PhaseTime;
    var moonPos = SunCalcNet.MoonCalc.GetMoonPosition(time, latitude, longitude);
    var moonIllumination = SunCalcNet.MoonCalc.GetMoonIllumination(time);
    var moonIlluminationFraction = moonIllumination.Fraction;
}

<div>
    <p>
        Sun altitude: @RadianToDegree(@sunPos.Altitude).ToString("F2", CultureInfo.InvariantCulture)°
    </p>
    <p>
        Sun sets in @((sunsetTime - time).TotalMinutes.ToString("F2", CultureInfo.InvariantCulture)) minutes
    </p>
    <p>
        Moon altitude: @RadianToDegree(@moonPos.Altitude).ToString("F2", CultureInfo.InvariantCulture)°
    </p>
    <p>
        Moon illumination: @moonIlluminationFraction.ToString("P2", CultureInfo.InvariantCulture)
    </p>
</div>

@code {
    double RadianToDegree(double radian)
    {
        return 180.0 * radian / Math.PI;
    }
}
